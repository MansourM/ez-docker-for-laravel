#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ez_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez - easy to setup, robust and production ready environment for Laravel using Docker, Docker Compose and bash script.\n"
    echo

  else
    printf "ez - easy to setup, robust and production ready environment for Laravel using Docker, Docker Compose and bash script.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ez COMMAND\n"
  printf "  ez [COMMAND] --help | -h\n"
  printf "  ez --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Docker Commands\n" "docker "
  printf "  %s   Shared containers Commands\n" "shared "
  printf "  %s   Laravel containers Commands\n" "laravel"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ez docker install\n"
    printf "  ez d i\n"
    echo

  fi
}

# :command.usage
ez_docker_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez docker - Docker Commands\n"
    echo

  else
    printf "ez docker - Docker Commands\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez docker COMMAND\n"
  printf "  ez docker [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   add docker repository to apt sources, then install docker engine\n" "install  "
  printf "  %s   uninstall docker engine\n" "uninstall"
  printf "  %s   removes all images, containers, and volumes, (You have to delete any edited configuration files manually)\n" "remove   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_docker_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez docker install - add docker repository to apt sources, then install docker engine\n"
    echo

  else
    printf "ez docker install - add docker repository to apt sources, then install docker engine\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez docker install\n"
  printf "  ez docker install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_docker_uninstall_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez docker uninstall - uninstall docker engine\n"
    echo

  else
    printf "ez docker uninstall - uninstall docker engine\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez docker uninstall\n"
  printf "  ez docker uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_docker_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez docker remove - removes all images, containers, and volumes, (You have to delete any edited configuration files manually)\n"
    echo

  else
    printf "ez docker remove - removes all images, containers, and volumes, (You have to delete any edited configuration files manually)\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez docker remove\n"
  printf "  ez docker remove --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared - Shared containers Commands\n"
    echo

  else
    printf "ez shared - Shared containers Commands\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez shared COMMAND\n"
  printf "  ez shared [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   build and start shared containers\n" "deploy "
  printf "  %s   start shared containers\n" "start  "
  printf "  %s   stop shared containers\n" "stop   "
  printf "  %s   restart shared containers\n" "restart"
  printf "  %s   remove shared containers\n" "down   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared deploy - build and start shared containers\n"
    echo

  else
    printf "ez shared deploy - build and start shared containers\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez shared deploy\n"
  printf "  ez shared deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared start - start shared containers\n"
    echo

  else
    printf "ez shared start - start shared containers\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez shared start\n"
  printf "  ez shared start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared stop - stop shared containers\n"
    echo

  else
    printf "ez shared stop - stop shared containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ez shared stop\n"
  printf "  ez shared stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared restart - restart shared containers\n"
    echo

  else
    printf "ez shared restart - restart shared containers\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez shared restart\n"
  printf "  ez shared restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_shared_down_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez shared down - remove shared containers\n"
    echo

  else
    printf "ez shared down - remove shared containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ez shared down\n"
  printf "  ez shared down --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_laravel_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel - Laravel containers Commands\n"
    echo

  else
    printf "ez laravel - Laravel containers Commands\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez laravel COMMAND\n"
  printf "  ez laravel [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   build and start Laravel containers\n" "deploy "
  printf "  %s   start Laravel containers\n" "start  "
  printf "  %s   stop Laravel containers\n" "stop   "
  printf "  %s   restart Laravel containers\n" "restart"
  printf "  %s   remove Laravel containers\n" "down   "
  printf "  %s   remove Laravel containers\n" "new    "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_laravel_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel deploy - build and start Laravel containers\n"
    echo

  else
    printf "ez laravel deploy - build and start Laravel containers\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez laravel deploy APP_ENV\n"
  printf "  ez laravel deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "APP_ENV"
    printf "    Laravel app environment\n"
    printf "    Allowed: test, staging, production\n"
    echo

  fi
}

# :command.usage
ez_laravel_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel start - start Laravel containers\n"
    echo

  else
    printf "ez laravel start - start Laravel containers\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez laravel start APP_ENV\n"
  printf "  ez laravel start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "APP_ENV"
    printf "    Laravel app environment\n"
    printf "    Allowed: test, staging, production\n"
    echo

  fi
}

# :command.usage
ez_laravel_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel stop - stop Laravel containers\n"
    echo

  else
    printf "ez laravel stop - stop Laravel containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ez laravel stop\n"
  printf "  ez laravel stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_laravel_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel restart - restart Laravel containers\n"
    echo

  else
    printf "ez laravel restart - restart Laravel containers\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez laravel restart\n"
  printf "  ez laravel restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_laravel_down_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel down - remove Laravel containers\n"
    echo

  else
    printf "ez laravel down - remove Laravel containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ez laravel down\n"
  printf "  ez laravel down --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ez_laravel_new_usage() {
  if [[ -n $long_usage ]]; then
    printf "ez laravel new - remove Laravel containers\n"
    echo

  else
    printf "ez laravel new - remove Laravel containers\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ez laravel new\n"
  printf "  ez laravel new --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/ask_question.sh
#TODO add regex that should match result
#TODO hide text if text is password?
ask_question() {
    local question=$1
    local default=$2
    local result

    local GREEN='\033[0;32m'
    local YELLOW='\033[0;33m'
    local NC='\033[0m' # No Color

    # Prompt the user with the question and default answer
    read -p "$(echo -e "${GREEN}$question ${YELLOW}[$default]${NC}: ")" result

    # Use the default if the user presses Enter without typing anything
    if [[ -z "$result" ]]; then
        result=$default
    fi

    echo $result
}

# src/lib/create_new_database_and_user.sh
create_new_database_and_user() {

  if [ "$#" -ne 3 ]; then
      log_error "Invalid Arguments, Usage: $0 <new_db_name> <new_user_name> <new_user_password>"
      return 1
  fi

  # Set variables
  NEW_DB_NAME=$1
  NEW_USER_NAME=$2
  NEW_USER_PASSWORD=$3

  log_header "Creating Database: $NEW_DB_NAME with User: $NEW_USER_NAME"

  MYSQL_USER="root"
  # DB_ROOT_PASSWORD is read from shared.env

  # Check if database exists (improve error handling)
  if ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "SELECT 1 FROM \`$NEW_DB_NAME\`;" > /dev/null 2>&1; then
    # Create database
    if ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS \`$NEW_DB_NAME\`;"; then
      log
      log_error "Failed to create database '$NEW_DB_NAME'"
      return 1
    fi
    log_success "Created Database: $NEW_DB_NAME";
  else
    log "Database: $NEW_DB_NAME Already Exists";
  fi

  #TODO how to give access to specific container instead of %?
  # Check if user exists (improve error handling)
  if ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "SELECT user FROM mysql.user WHERE user='$NEW_USER_NAME';" --skip-column-names -B | grep -q "$NEW_USER_NAME"; then
    # Create user and grant privileges
    if ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "CREATE USER '$NEW_USER_NAME'@'%' IDENTIFIED BY '$NEW_USER_PASSWORD';" || \
       ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "GRANT ALL PRIVILEGES ON \`$NEW_DB_NAME\`.* TO '$NEW_USER_NAME'@'%';" || \
       ! docker exec -i $DB_HOST mysql -u$MYSQL_USER -p$DB_ROOT_PASSWORD -e "FLUSH PRIVILEGES;"; then
      log_error "Failed to create and grant privileges for user '$NEW_USER_NAME'"
      return 1
    fi
    log_success "User: '$NEW_USER_NAME' created for DB: $NEW_DB_NAME with full privileges";
  else
    log "User '$NEW_USER_NAME' already exists";
  fi
}

# src/lib/generate_password.sh
generate_password() {
    local length=$1
    local charset="A-Za-z0-9@#%&*"
    tr -dc "$charset" </dev/urandom | head -c $length
}

# src/lib/load_env.sh
load_env() {
  local filePath="${1:-.env}"

  if [ ! -f "$filePath" ]; then
    echo "missing ${filePath}"
    exit 1
  fi

  log "Reading $filePath"
  while read -r LINE; do
    # Remove leading and trailing whitespaces, and carriage return
    CLEANED_LINE=$(echo "$LINE" | awk '{$1=$1};1' | tr -d '\r')

    if [[ $CLEANED_LINE != '#'* ]] && [[ $CLEANED_LINE == *'='* ]]; then
      export "$CLEANED_LINE"
    fi
  done < "$filePath"
}

# src/lib/log.sh
log() {
  if [ "$#" -ne 1 ]; then
      echo -e "\nInvalid Arguments, Usage: $0 <message>\n"
      return 1
  fi

  echo "-- $1"
}

# src/lib/log_error.sh
log_error() {
  if [ "$#" -ne 1 ]; then
      echo -e "\nInvalid Arguments, Usage: $0 <message>\n"
      return 1
  fi

  RED='\033[0;31m'
  NORMAL='\033[0m'

  echo -e "${RED}-- $1${NORMAL}"
}

# src/lib/log_header.sh
log_header() {
  if [ "$#" -ne 1 ]; then
      echo -e "\nInvalid Arguments, Usage: $0 <message>\n"
      return 1
  fi

  BOLD_CYAN='\033[1;36m'
  NORMAL='\033[0m'

  echo -e "${BOLD_CYAN}==[ $1 ]==\n${NORMAL}"
}

# src/lib/log_success.sh
log_success() {
  if [ "$#" -ne 1 ]; then
      echo -e "\nInvalid Arguments, Usage: $0 <message>\n"
      return 1
  fi

  GREEN='\033[0;32m'
  NORMAL='\033[0m'

  echo -e "${GREEN}-- $1${NORMAL}"
}

# src/lib/log_warning.sh
log_error() {
  if [ "$#" -ne 1 ]; then
      echo -e "\nInvalid Arguments, Usage: $0 <message>\n"
      return 1
  fi

  local YELLOW='\033[0;33m'
  NORMAL='\033[0m'

  echo -e "${YELLOW}-- $1${NORMAL}"
}

# src/lib/merge_env.sh
merge_env() {
  local file1="$1"
  local file2="$2"
  local output="$3"

  if [ ! -e "$file1" ]; then
    log_error "$file1 does not exist!"
    exit 1
  fi

  if [ ! -e "$file2" ]; then
    log_error "$file2 does not exist!"
    exit 1
  fi

  sort -u -t '=' -k 1,1 $file2 $file1 | grep -v '^$\|^\s*\#' > $output

  log_success "Merged $file2 into $file1 file creating $output."
}

# :command.command_functions

# :command.function
ez_docker_install_command() {
  # src/docker_install_command.sh
  #inspect_args

  apt-get update
  apt-get -y install ca-certificates curl gnupg
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  chmod a+r /etc/apt/keyrings/docker.gpg

  # Add the repository to Apt sources:
  echo \
    "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |
    tee /etc/apt/sources.list.d/docker.list >/dev/null
  apt-get update

  apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # Validate the success of the installation
  if [ $? -ne 0 ]; then
      log_error "Failed to install Docker and related packages"
      exit 1
  fi

}

# :command.function
ez_docker_uninstall_command() {
  # src/docker_uninstall_command.sh
  #inspect_args

  apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

}

# :command.function
ez_docker_remove_command() {
  # src/docker_remove_command.sh
  #inspect_args

  rm -rf /var/lib/docker
  rm -rf /var/lib/containerd

}

# :command.function
ez_shared_deploy_command() {
  # src/shared_deploy_command.sh
  #inspect_args

  # Check if the network already exists
  if docker network inspect "$SHARED_NETWORK_NAME" >/dev/null 2>&1; then
    log "Network '$SHARED_NETWORK_NAME' already exists"
  else
    docker network create "$SHARED_NETWORK_NAME"
    if [ $? -eq 0 ]; then
      log_success "Network '$SHARED_NETWORK_NAME' created"
    else
      log_error "Failed to create network '$SHARED_NETWORK_NAME'"
      exit 1
    fi
  fi

  #TODO read APP_ENV from cli args and ignore APP_ENV in .env?
  # Check if APP_ENV is set to dev, test, staging, or production
  if [[ "$APP_ENV" != "dev" && "$APP_ENV" != "test" && "$APP_ENV" != "staging" && "$APP_ENV" != "production" ]]; then
      log_error "Error: Invalid value for APP_ENV. It must be either dev, test, staging, or production."
      exit 1
  fi

  log_header "Running Docker Compose for shared services"

  docker compose -f compose-shared.yml --env-file "env/.env" --env-file "env/shared.env" up --build -d
  if [ $? -ne 0 ]; then
    log_error "Failed to run Docker Compose"
    exit 1
  fi

}

# :command.function
ez_shared_start_command() {
  # src/shared_start_command.sh
  #inspect_args

  docker compose -f compose-shared.yml --profile "$APP_ENV" start

}

# :command.function
ez_shared_stop_command() {
  # src/shared_stop_command.sh
  #inspect_args

  docker compose -f compose-shared.yml --profile "$APP_ENV" stop

}

# :command.function
ez_shared_restart_command() {
  # src/shared_restart_command.sh
  #inspect_args

  docker compose -f compose-shared.yml --profile "$APP_ENV" restart

}

# :command.function
ez_shared_down_command() {
  # src/shared_down_command.sh
  #inspect_args

  docker compose -f compose-shared.yml --profile "$APP_ENV"  down

}

# :command.function
ez_laravel_deploy_command() {
  # src/laravel_deploy_command.sh
  #TODO duplication, read APP_ENV from cli args and ignore APP_ENV in .env?
  echo -e "\n==[ Preparing to deploy Laravel in $APP_ENV mode ]==\n"

  #careful with laravel_folder_name, it must be the same as laravel dockerfile and docker compose file
  laravel_folder_name="laravel-$APP_ENV"
  #TODO maybe skip if nothing was changed?
  # Check if the folder exists
  log_header "Preparing source code"
  if [ -d "$laravel_folder_name" ]; then
      log "Updating existing $laravel_folder_name folder"

      cd "$laravel_folder_name" || exit 1
      log "Removing previous build folders..."
      rm -rf "node_modules" "vendor" "public/build"
      log "Discarding local changes"
      git reset --hard
      git pull origin "$GIT_BRANCH"

      # Check if the git operation was successful
      if [ $? -ne 0 ]; then
          log_error "Error: Git pull failed."
          exit 1
      fi

      # Check if the directory removal was successful
      if [ $? -ne 0 ]; then
          log_error "Error: Failed to remove build folders."
          exit 1
      fi

      cd - || exit 1
  else
      log "Cloning new $laravel_folder_name folder"
      git clone --depth 1 -b "$GIT_BRANCH" "$GIT_URL" "$laravel_folder_name"

      # Check if cloning was successful
      if [ $? -ne 0 ]; then
          log_error "Error: Git cloning failed."
          exit 1
      fi
  fi

  #TODO check if env files exist?
  base_env="env/.env"
  override_env="env/$APP_ENV.env"
  merged_env="env/merged/$APP_ENV.env"
  merge_env $base_env $override_env $merged_env
  #TODO merge read_env and merge_env fn and process all env in before.sh?

  #FIXME on first run this will fail since db is not fully up and functional yet
  create_new_database_and_user $DB_DATABASE $DB_USERNAME $DB_PASSWORD

  log_header "Running Docker Compose for Laravel $APP_ENV"
  docker compose -f compose-laravel.yml --profile "$APP_ENV" --env-file "$merged_env" up --build -d

}

# :command.function
ez_laravel_start_command() {
  # src/laravel_start_command.sh
  #inspect_args

  docker compose -f compose-laravel.yml --profile "$APP_ENV" start

}

# :command.function
ez_laravel_stop_command() {
  # src/laravel_stop_command.sh
  #inspect_args

  docker compose -f compose-laravel.yml --profile "$APP_ENV" stop

}

# :command.function
ez_laravel_restart_command() {
  # src/laravel_restart_command.sh
  #inspect_args

  docker compose -f compose-laravel.yml --profile "$APP_ENV" restart

}

# :command.function
ez_laravel_down_command() {
  # src/laravel_down_command.sh
  #inspect_args

  docker compose -f compose-laravel.yml --profile "$APP_ENV" down

}

# :command.function
ez_laravel_new_command() {
  # src/laravel_new_command.sh
  #inspect_args

  APP_NAME=$(ask_question "Enter the application name" "my_app")
  GIT_URL=$(ask_question "Enter the application git url" "https://github.com/MansourM/ez-docker-for-laravel-example.git")
  SETUP_TEST_ENV=$(ask_question "Do you want to set up the test environment?" "yes")

  echo "$APP_NAME"
  echo "$GIT_URL"
  echo "$SETUP_TEST_ENV"

  if [[ "$SETUP_TEST_ENV" == "yes" ]]; then

      TEST_BRANCH_NAME=$(ask_question "Enter the test branch name" "test")

      TEST_DB_NAME=$(ask_question "Enter the test database name" "${APP_NAME}_test")
      TEST_DB_USERNAME=$(ask_question "Enter the test database username" "${APP_NAME}_test_user")
      GENERATED_PASSWORD=$(generate_password 16)
      TEST_DB_PASSWORD=$(ask_question "Enter the $TEST_DB_USERNAME 's password'" "$GENERATED_PASSWORD")

      echo "$TEST_BRANCH_NAME"
      echo "$TEST_DB_NAME"
      echo "$TEST_DB_USERNAME"
      echo "$TEST_DB_PASSWORD"
  fi

  DATA_DIR="data/$APP_NAME"

  if [[ -d "$DATA_DIR" ]]; then
      log_error "Directory $DATA_DIR already exists. Exiting."
      exit 1
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ez_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    docker | d)
      action="docker"
      shift
      ez_docker_parse_requirements "$@"
      shift $#
      ;;

    shared | s)
      action="shared"
      shift
      ez_shared_parse_requirements "$@"
      shift $#
      ;;

    laravel | l)
      action="laravel"
      shift
      ez_laravel_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ez_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_docker_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_docker_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      ez_docker_install_parse_requirements "$@"
      shift $#
      ;;

    uninstall | u)
      action="uninstall"
      shift
      ez_docker_uninstall_parse_requirements "$@"
      shift $#
      ;;

    remove | r)
      action="remove"
      shift
      ez_docker_remove_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ez_docker_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_docker_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_docker_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="docker install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_docker_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_docker_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="docker uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_docker_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_docker_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="docker remove"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    deploy | d)
      action="deploy"
      shift
      ez_shared_deploy_parse_requirements "$@"
      shift $#
      ;;

    start | s)
      action="start"
      shift
      ez_shared_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      ez_shared_stop_parse_requirements "$@"
      shift $#
      ;;

    restart | r)
      action="restart"
      shift
      ez_shared_restart_parse_requirements "$@"
      shift $#
      ;;

    down)
      action="down"
      shift
      ez_shared_down_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ez_shared_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shared deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shared start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shared stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shared restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_shared_down_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_shared_down_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="shared down"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_laravel_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    deploy | d)
      action="deploy"
      shift
      ez_laravel_deploy_parse_requirements "$@"
      shift $#
      ;;

    start | s)
      action="start"
      shift
      ez_laravel_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      ez_laravel_stop_parse_requirements "$@"
      shift $#
      ;;

    restart | r)
      action="restart"
      shift
      ez_laravel_restart_parse_requirements "$@"
      shift $#
      ;;

    down)
      action="down"
      shift
      ez_laravel_down_parse_requirements "$@"
      shift $#
      ;;

    new | n)
      action="new"
      shift
      ez_laravel_new_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ez_laravel_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_laravel_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['APP_ENV']+x} ]]; then
          args['APP_ENV']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['APP_ENV']+x} ]]; then
    printf "missing required argument: APP_ENV\nusage: ez laravel deploy APP_ENV\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['APP_ENV']:-} ]] && [[ ! ${args['APP_ENV']:-} =~ ^(test|staging|production)$ ]]; then
    printf "%s\n" "APP_ENV must be one of: test, staging, production" >&2
    exit 1
  fi

}

# :command.parse_requirements
ez_laravel_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['APP_ENV']+x} ]]; then
          args['APP_ENV']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['APP_ENV']+x} ]]; then
    printf "missing required argument: APP_ENV\nusage: ez laravel start APP_ENV\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['APP_ENV']:-} ]] && [[ ! ${args['APP_ENV']:-} =~ ^(test|staging|production)$ ]]; then
    printf "%s\n" "APP_ENV must be one of: test, staging, production" >&2
    exit 1
  fi

}

# :command.parse_requirements
ez_laravel_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_laravel_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_laravel_down_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_down_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel down"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ez_laravel_new_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ez_laravel_new_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="laravel new"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  #inspect_args

  if [[ $EUID -ne 0 ]]; then
     log_error "This script must be run as root"
     exit 1
  fi

  #TODO improve here i have duplication in app_env arg and APP_ENV in .env files
  #log_header "Reading .env files"
  #load_env "env/.env"
  #load_env "env/shared.env"

  #if [[ -n "${args[APP_ENV]}" ]]; then
  #  load_env "env/${args[APP_ENV]}.env"
  #fi

  #if [[ "$APP_ENV" != "${args[APP_ENV]}" ]]; then
  #    log_error "Error: APP_ENV in 'env/${args[APP_ENV]}.env' does not match 'ez' command argument ('$APP_ENV'!='${args[APP_ENV]}')."
  #    exit 1
  #fi

}

# :command.initialize
initialize() {
  version="0.2.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "docker") ez_docker_command ;;
    "docker install") ez_docker_install_command ;;
    "docker uninstall") ez_docker_uninstall_command ;;
    "docker remove") ez_docker_remove_command ;;
    "shared") ez_shared_command ;;
    "shared deploy") ez_shared_deploy_command ;;
    "shared start") ez_shared_start_command ;;
    "shared stop") ez_shared_stop_command ;;
    "shared restart") ez_shared_restart_command ;;
    "shared down") ez_shared_down_command ;;
    "laravel") ez_laravel_command ;;
    "laravel deploy") ez_laravel_deploy_command ;;
    "laravel start") ez_laravel_start_command ;;
    "laravel stop") ez_laravel_stop_command ;;
    "laravel restart") ez_laravel_restart_command ;;
    "laravel down") ez_laravel_down_command ;;
    "laravel new") ez_laravel_new_command ;;
  esac
}

initialize
run "$@"
